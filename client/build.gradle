buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'

        classpath 'org.robolectric:robolectric-gradle-plugin:0.14.+'
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'robolectric'

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'
    defaultConfig {
        minSdkVersion 16
        versionCode 1
        versionName '1.2'
    }
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "String", "test_marketplace", "\"${getProjectProperty('tenant')}\""
            buildConfigField "String", "test_application", "\"${getProjectProperty('app')}\""
            buildConfigField "String", "test_app_key", "\"${getProjectProperty('key')}\""
            buildConfigField "String", "test_provider", "\"${getProjectProperty('provider')}\""
            buildConfigField "String", "test_username", "\"${getProjectProperty('user')}\""
            buildConfigField "String", "test_password", "\"${getProjectProperty('pass')}\""
            buildConfigField "String", "test_service", "\"${getProjectProperty('service')}\""
            buildConfigField "String", "test_email_to", "\"${getProjectProperty('email_to')}\""
            buildConfigField "String", "test_email_attach", "\"${getProjectProperty('email_attach')}\""
        }
    }
    productFlavors {
    }
    sourceSets {
        androidTest.setRoot('src/test')
    }
    lintOptions {
        abortOnError false
    }
}
def String getProjectProperty(String propertyName)
{
    String propertyValue = "null"
    if (hasProperty(propertyName))
    {
        propertyValue = this.properties[propertyName]
    }
    return propertyValue
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}

task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

dependencies {
    androidTestCompile 'junit:junit:4.11'
    compile 'com.google.android.gms:play-services:5.0.+'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.code.gson:gson:2.2.4'
    compile "org.java-websocket:Java-WebSocket:1.3.0"
    androidTestCompile 'org.robolectric:robolectric:2.3'

}

//only include files that are suffixed with Test.class and set the max heap size
robolectric {
    //exclude '**/PubSubTest.class'
    include '**/PubSubTest.class'
    maxHeapSize = "2048m"

}
